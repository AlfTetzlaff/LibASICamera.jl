var documenterSearchIndex = {"docs":
[{"location":"#LibASICamera-API-1","page":"LibASICamera API","title":"LibASICamera API","text":"","category":"section"},{"location":"#","page":"LibASICamera API","title":"LibASICamera API","text":"Modules = [LibASICamera]\nOrder   = [:function, :type]","category":"page"},{"location":"#LibASICamera.allocate_buffer-Tuple{Integer,Integer,ASI_IMG_TYPE}","page":"LibASICamera API","title":"LibASICamera.allocate_buffer","text":"allocate_buffer(width::Integer, height::Integer, img_type::ASI_IMG_TYPE)\n\nAllocates an image buffer for the camera to write to.\n\nArgs:\n\nwidth: Image width\nheight: Image height\nimg_type: One of\n    -ASI_IMG_RAW8\n    -ASI_IMG_Y8\n    -ASI_IMG_RAW16\n    -ASI_IMG_RAW24\n\nReturns:\n\nA zero-initialized array of the appropriate shape.\n\nThrows:\n\nASIWrapperError if an unsupported image type is given.\n\n\n\n\n\n","category":"method"},{"location":"#LibASICamera.capture_still-Tuple{Integer}","page":"LibASICamera API","title":"LibASICamera.capture_still","text":"capture_still(id::Integer)\n\nCaptures a still image. You have to set gain, exposure etc. beforehand using setcontrolvalue(...).\n\nReturns:\n\nAn array containing the image.\n\nThrows:\n\nASIWrapperError if the image format is not supported by the wrapper, or\nASIError in other unfortunate cases\n\n\n\n\n\n","category":"method"},{"location":"#LibASICamera.close_camera-Tuple{Integer}","page":"LibASICamera API","title":"LibASICamera.close_camera","text":"close_camera(id::Integer)\n\nCloses the ASI camera connection.\n\nArgs:\n\nid: Camera id\n\nThrows:\n\nASIError\n\n\n\n\n\n","category":"method"},{"location":"#LibASICamera.disable_dark_subtract-Tuple{Integer}","page":"LibASICamera API","title":"LibASICamera.disable_dark_subtract","text":"\n\n\n\n","category":"method"},{"location":"#LibASICamera.enable_dark_subtract-Tuple{Integer,Any}","page":"LibASICamera API","title":"LibASICamera.enable_dark_subtract","text":"\n\n\n\n","category":"method"},{"location":"#LibASICamera.get_camera_mode-Tuple{Integer}","page":"LibASICamera API","title":"LibASICamera.get_camera_mode","text":"get_camera_mode(id::Integer)\n\nGet the current camera mode, only needed to call when the IsTriggerCam in the CameraInfo is true.\n\n\n\n\n\n","category":"method"},{"location":"#LibASICamera.get_camera_property-Tuple{Integer}","page":"LibASICamera API","title":"LibASICamera.get_camera_property","text":"get_camera_property(id::Integer)\n\nFetches the camera properties for a given ID.\n\nArgs:\n\nid: Camera id\n\nReturns:\n\nASI_CAMERA_INFO object\n\nThrows:\n\nASIError in case of failure\n\n\n\n\n\n","category":"method"},{"location":"#LibASICamera.get_connected_devices-Tuple{}","page":"LibASICamera API","title":"LibASICamera.get_connected_devices","text":"get_connected_devices()\n\nReturns a list of the connected devices.\n\n\n\n\n\n","category":"method"},{"location":"#LibASICamera.get_control_caps-Tuple{Integer}","page":"LibASICamera API","title":"LibASICamera.get_control_caps","text":"get_control_caps(id::Integer)\n\nReturns the control properties available for this camera.\n\nThe camera needs to be open.\n\nArgs:\n\nid: Camera id\n\nReturns:\n\nVector of ASI_CONTROL_CAPS structs.\n\nThrows:\n\nASIError\n\n\n\n\n\n","category":"method"},{"location":"#LibASICamera.get_control_value-Tuple{Integer,ASI_CONTROL_TYPE}","page":"LibASICamera API","title":"LibASICamera.get_control_value","text":"get_control_value(id::Integer, control_type::ASI_CONTROL_TYPE)\n\nFetches the current setting of the control value, e.g. exposure or gain.\n\nArgs:\n\nid: Camera id\ncontrol_type: The control type to fetch, e.g. exposure or gain.\n\nReturns:\n\nA tuple (value, is_auto)\n\nThrows:\n\nASIError\n\n\n\n\n\n","category":"method"},{"location":"#LibASICamera.get_data_after_exp!-Tuple{Integer,Any}","page":"LibASICamera API","title":"LibASICamera.get_data_after_exp!","text":"get_data_after_exp!(id::Integer, buffer)\n\nFetches the data after a successful exposure and writes it into buffer.\n\n\n\n\n\n","category":"method"},{"location":"#LibASICamera.get_dropped_frames-Tuple{Integer}","page":"LibASICamera API","title":"LibASICamera.get_dropped_frames","text":"get_dropped_frames(id::Integer)\n\nReturns the number of dropped frames.\n\nFrames are dropped when the USB is bandwidth is low or the harddisk write speed is slow. The count is reset to 0 after capturing stops.\n\n\n\n\n\n","category":"method"},{"location":"#LibASICamera.get_exp_status-Tuple{Integer}","page":"LibASICamera API","title":"LibASICamera.get_exp_status","text":"get_exp_status(id::Integer)\n\nReturns the status of an ongoing exposure. See 'instances(ASIEXPSTATUS)'.\n\nThrows:\n\nASIError\n\n\n\n\n\n","category":"method"},{"location":"#LibASICamera.get_gain_offset-Tuple{Integer}","page":"LibASICamera API","title":"LibASICamera.get_gain_offset","text":"get_gain_offset(id::Integer)\n\nGet the presets for offset and gain values at different \"sweet spots\".\n\nArgs:\n\nid: Camera id\n\nReturns:\n\nA dictionary containing:\n    1. The offset at highest dynamic range\n    2. The offset at unity gain\n    3. The gain with lowest readout noise\n    4. The offset with lowest readout noise\n\nThrows:\n\nASIError\n\n\n\n\n\n","category":"method"},{"location":"#LibASICamera.get_id-Tuple{Integer}","page":"LibASICamera API","title":"LibASICamera.get_id","text":"get_id(id::Integer)\n\nReturns the camera id stored in flash, only available for USB3 cameras.\n\n\n\n\n\n","category":"method"},{"location":"#LibASICamera.get_num_connected_cameras-Tuple{}","page":"LibASICamera API","title":"LibASICamera.get_num_connected_cameras","text":"get_num_connected_cameras()\n\nThis function returns the count of connected cameras and should be called first.\n\n\n\n\n\n","category":"method"},{"location":"#LibASICamera.get_roi_format-Tuple{Integer}","page":"LibASICamera API","title":"LibASICamera.get_roi_format","text":"get_roi_format(id::Integer)\n\nFetches the current region of interest settings.\n\n\n\n\n\n","category":"method"},{"location":"#LibASICamera.get_roi_start-Tuple{Integer}","page":"LibASICamera API","title":"LibASICamera.get_roi_start","text":"get_roi_start(id::Integer)\n\nReturns the region of interest start position (startx, starty).\n\n\n\n\n\n","category":"method"},{"location":"#LibASICamera.get_sdk_version-Tuple{}","page":"LibASICamera API","title":"LibASICamera.get_sdk_version","text":"get_sdk_version()\n\nReturns the SDK version.\n\n\n\n\n\n","category":"method"},{"location":"#LibASICamera.get_serial_number-Tuple{Integer}","page":"LibASICamera API","title":"LibASICamera.get_serial_number","text":"get_serial_number(id::Integer)\n\nReturns the camera serial number.\n\n\n\n\n\n","category":"method"},{"location":"#LibASICamera.get_status-Tuple{Integer}","page":"LibASICamera API","title":"LibASICamera.get_status","text":"get_status(id::Integer)\n\nReturns the status of all camera parameters.\n\n\n\n\n\n","category":"method"},{"location":"#LibASICamera.get_supported_modes-Tuple{Integer}","page":"LibASICamera API","title":"LibASICamera.get_supported_modes","text":"get_supported_modes(id::Integer)\n\nReturns the supported camera modes, only need to call when the IsTriggerCam in the CameraInfo is true.\n\nThrows:\n\nASIError\n\n\n\n\n\n","category":"method"},{"location":"#LibASICamera.get_trigger_output_config-Tuple{Integer}","page":"LibASICamera API","title":"LibASICamera.get_trigger_output_config","text":"get_trigger_output_config(id::Integer)\n\nGet the output pin configuration, only needed to call when the IsTriggerCam in the CameraInfo is true.\n\n\n\n\n\n","category":"method"},{"location":"#LibASICamera.get_video_data!","page":"LibASICamera API","title":"LibASICamera.get_video_data!","text":"get_video_data!(id::Integer, buffer, timeout_ms)\n\nWrites a video frame to the given buffer. Make sure the buffer is large enough to fit the frame. Call this as fast as possible in a loop and check whether the return value equals ASI_SUCCESS.\n\nArgs:\n\nid: Camera id\nbuffer: A buffer to write the video frame to.\ntimeout_ms: Time to wait for a frame. Recommendation: 2 * exposure_Î¼s + 500 ms <- inconsistent units?!\n\nReturns:\n\nAn ASI_ERROR_CODE, which should be ASI_SUCCESS.\n\n\n\n\n\n","category":"function"},{"location":"#LibASICamera.init_camera-Tuple{Integer}","page":"LibASICamera API","title":"LibASICamera.init_camera","text":"init_camera(id::Integer)\n\nInitialize the camera. Needs to be called before capturing any data.\n\nArgs:\n\nid: Camera id\n\nThrows:\n\nASIError\n\n\n\n\n\n","category":"method"},{"location":"#LibASICamera.open_camera-Tuple{Integer}","page":"LibASICamera API","title":"LibASICamera.open_camera","text":"open_camera(id::Integer)\n\nOpens the ASI camera connection.\n\nOpen the camera before any interaction with the camera, this will not affect the camera which is capturing. Then you must call init_camera() to perform any actions.\n\nArgs:\n\nid: Camera ID\n\nThrows:\n\nASIError\n\n\n\n\n\n","category":"method"},{"location":"#LibASICamera.pulse_guide_off-Tuple{Integer,ASI_GUIDE_DIRECTION}","page":"LibASICamera API","title":"LibASICamera.pulse_guide_off","text":"pulse_guide_off(id::Integer, direction::ASI_GUIDE_DIRECTION)\n\nDeactivates the pulse guide in the given direction.\n\nArgs:\n\nid: Camera id\ndirection: Guiding direction; call 'instances(ASI_GUIDE_DIRECTION)' for options.\n\nThrows:\n\nASIError\n\n\n\n\n\n","category":"method"},{"location":"#LibASICamera.pulse_guide_on-Tuple{Integer,ASI_GUIDE_DIRECTION}","page":"LibASICamera API","title":"LibASICamera.pulse_guide_on","text":"pulse_guide_on(id::Integer, direction::ASI_GUIDE_DIRECTION)\n\nActivates the pulse guide in the given direction.\n\nArgs:\n\nid: Camera id\ndirection: Guiding direction; call 'instances(ASI_GUIDE_DIRECTION)'\n\nThrows:\n\nASIError\n\n\n\n\n\n","category":"method"},{"location":"#LibASICamera.send_soft_trigger-Tuple{Integer,ASI_BOOL}","page":"LibASICamera API","title":"LibASICamera.send_soft_trigger","text":"send_soft_trigger(id::Integer, start::ASI_BOOL)\n\nFrom original docs: Send a softTrigger. For edge trigger, it only need to set true which means send a rising trigger to start exposure. For level trigger, it need to set true first means start exposure, and set false means stop exposure. Only needed to call when the IsTriggerCam in the CameraInfo is true.\n\n\n\n\n\n","category":"method"},{"location":"#LibASICamera.set_camera_mode-Tuple{Integer,ASI_CAMERA_MODE}","page":"LibASICamera API","title":"LibASICamera.set_camera_mode","text":"set_camera_mode(id::Integer, mode::ASI_CAMERA_MODE)\n\nSet the camera mode, only needed to call when the IsTriggerCam in the CameraInfo is true.\n\n\n\n\n\n","category":"method"},{"location":"#LibASICamera.set_control_value","page":"LibASICamera API","title":"LibASICamera.set_control_value","text":"set_control_value(id::Integer, control_type::ASI_CONTROL_TYPE, value, auto::Bool=false)\n\nSets a control (e.g. exposure) to the given value. Automatically sets the minimum or maximum if the given value is out of bounds.\n\nArgs:\n\nid: Camera id\ncontrol_type: The control type to set, e.g. exposure or gain.\nvalue: The value to which the control is set.\nauto: Whether or not the control should be automatically set.\n    Check if this is supported for the given control beforehand.\n\nThrows:\n\nASIError\n\n\n\n\n\n","category":"function"},{"location":"#LibASICamera.set_roi_format-Tuple{Integer,Any,Any,Any,ASI_IMG_TYPE}","page":"LibASICamera API","title":"LibASICamera.set_roi_format","text":"set_roi_format(id::Integer, width, height, binning, img_type::ASI_IMG_TYPE)\n\nSets the region of interest (roi). Do so before capturing.\n\nThe width and height are the values after binning, i.e. you need to set the width to 640 and the height to 480 if you want to run at 640x480 @ BIN2.\n\nASI120's data size must be a multiple of 1024 which means width*height%1024==0.\n\nArgs:\n\nid: Camera id\nwidth: ROI width\nheight: ROI height\nbinning: The binning mode; 2 means to read out 2x2 pixels together. Check\n    which binning values are supported in the ASI_CAMERA_INFO struct of the\n    camera struct or by calling get_camera_property(id).\n\nThrows:\n\nASIError\n\n\n\n\n\n","category":"method"},{"location":"#LibASICamera.set_roi_start-Tuple{Integer,Any,Any}","page":"LibASICamera API","title":"LibASICamera.set_roi_start","text":"set_roi_start(id::Integer, startx, starty)\n\nSets the position of the top-left corner of the region of interest.\n\nYou can call this while the camera is streaming to move the ROI. By default, the ROI will be centered. In binned mode, the start values are relative to the binned sensor size.\n\nThrows:\n\nASIError\n\n\n\n\n\n","category":"method"},{"location":"#LibASICamera.set_trigger_output_config-Tuple{Integer,ASI_TRIG_OUTPUT,ASI_BOOL,Any,Any}","page":"LibASICamera API","title":"LibASICamera.set_trigger_output_config","text":"set_trigger_output_config(id::Integer, pin::ASI_TRIG_OUTPUT_PIN, high::ASI_BOOL, delay, duration)\n\nConfigure the output pin (A or B) of Trigger port. If duration <= 0, this output pin will be closed. Only need to call when the IsTriggerCam in the CameraInfo is true.\n\nArgs:\n\nid: Camera id\npin: Select the pin for output\nhigh: If true, the selected pin will output a high level as a signal\n\t\t\t\twhen it is effective.\ndelay: The delay between the camera receiving a trigger signal and the\n        output of the valid level. From 0 Î¼s - 2,000,000,000 Î¼s.\nduration: The duration of the valid level output. Same range as delay.\n\n\n\n\n\n","category":"method"},{"location":"#LibASICamera.start_exposure","page":"LibASICamera API","title":"LibASICamera.start_exposure","text":"start_exposure(id::Integer, is_dark=false)\n\nStarts an exposure. All relevant parameters (exposure time, gain) have to be set beforehand by calling setcontrolvalue(...) or e.g. set_gain(...).\n\n\n\n\n\n","category":"function"},{"location":"#LibASICamera.start_video-Tuple{Integer}","page":"LibASICamera API","title":"LibASICamera.start_video","text":"start_video(id::Integer)\n\nStart video capture.\n\nThrows:\n\nASIError\n\n\n\n\n\n","category":"method"},{"location":"#LibASICamera.stop_exposure-Tuple{Integer}","page":"LibASICamera API","title":"LibASICamera.stop_exposure","text":"stop_exposure(id::Integer)\n\nStops an ongoing exposure.\n\n\n\n\n\n","category":"method"},{"location":"#LibASICamera.stop_video-Tuple{Integer}","page":"LibASICamera API","title":"LibASICamera.stop_video","text":"stop_video(id::Integer)\n\nStops a running video capture.\n\nThrows:\n\nASIError\n\n\n\n\n\n","category":"method"},{"location":"#LibASICamera.ASICamera","page":"LibASICamera API","title":"LibASICamera.ASICamera","text":"ASICamera\n\nThe struct which contains information about the camera. Has fields .info and .control_caps.\n\n\n\n\n\n","category":"type"}]
}
